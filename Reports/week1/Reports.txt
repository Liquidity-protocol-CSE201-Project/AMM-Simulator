Fryderyk:

- I Collected, distributed, and explained introductory resources about the project to all team members:
    What is a liquidity pool
    How do we want to build our market simulator?
    What is the role of arbitrageurs in liquidity pools?
- Team building and distribution: together with Adithya Ravchandran and Levente Ludanyi I built appropriate team categories, collected people’s competences and preferences, and assigned people to the teams:
- Team categories: econ research, protocol research, building market simulator, building liquidity protocols
    Elected team leaders
    Everyone is assigned on Github
    Collected initial materials for the econ and protocol research teams
- With Adithya and Levente, I layed out the first two weeks of plans for the development teams

Levente:


Set up the GitHub repository
- Team building and distribution: together with Adithya Ravchandran and Fryderyk Sitnik I built appropriate team categories, collected people’s competences and preferences, and assigned people to the teams:
- Team categories: econ research, protocol research, building market simulator, building liquidity protocols
    Elected team leaders
    Everyone is assigned on Github
- As the project leader communicated with the team and overview the development process
- Helped those who have are not confident using GitHub to fork, create new branches and deploy
- Reviewed code and gave feedback on better implementation which aligns with my vision of the project as the project leader

Adithya:

- Set up the Trello workspace
- Team building and distribution: together with Adithya Ravchandran and Levente Ludanyi I built appropriate team categories, collected people’s competences and preferences, and assigned people to the teams:
- Team categories: econ research, protocol research, building market simulator, building liquidity protocols
    Elected team leaders
    Everyone is assigned on Github
- Helped structure mechanism of how classes interact such that there would be a standardized pool interface class with which every single implemented     protocol would work.
- Implemented modified version of Constant Sum protocol (px + y = k, where p is price, x and y are the tokens in the pool, and k is the constant) in ConstantSum.hpp
- Implemented testing function to check correctness of Constant Sum protocol.
- Made sure there was a clear and unconflicted structure to development for each team to avoid redundant work.

Jasmine: 

This week I familiarized myself with the different librairies on C++, tried simulating Liquidity pools and examined the best ways to represent 
our concentration of tokens in our Liquidity pool(s) as well as the price slippage of the tokens. Next week, I will start implementing the simple interface
representing the amount and price of each token in our Liquidity pool.


Victoire: 

This week I mainly researched the C++ visualization tools to get more familiar with them. The accent was put on how to make graphs.
I also tried to get a deeper understanding of the project, by playing with an online simulator to get a feel of what the project is supposed to do, of what it could look like. Next week, I intend to work together with the front end team to figure out exactly which one we are going to use and start implementing our ideas in C++.


Martina: 

My goal for this week was to get familiarized with Qt's tools for the front-end part of the project.
I looked for a display were users input values for our simulator to work. Furthermore, I reviewed some past projects for ideas on graphing and found useful 
libraries like qcustomplot. I will also look into graph making and other design tools.

The Nguyen:

- Add type Token for representing real tokens. Token is implemented such that each real token has only one intance of type Token representing it.
- Add interface for all pools PoolInterface. PoolInterface is an abstract class, which means that it cannot be used to instantiate objects and serves only as an interface.
- Add 2 basic liquidity protocols UniswapV2Pool and BalancerPool. Both inherit features from PoolInterface. Each protocol has its own algorithm to compute ouput quantity of swap operations, which is implemented in function ExecuteSwap.
- Assist adding type Account. Similar to Token, Account is implemented such that each real account has only one intance of type Account representing it. Each instance of type Account can also be understood as a person. For now, accounts can interact with liquidity pools through swap operations (function Trade).

Minh Pham:

- Creating the Account class that allows users to create account, deposit, and trade with pool. 
- Writing test for Account.hpp. Adding the usd_price attribute to the Token class.

Matheo Le Masson:

- Understand actual code
    - Learn how to use VS Code, Github
    - Understand existing code on liquidity pool : classes
- Play with Automated Market Maker Simulator
    - Understand algorithm behind it in order to implement it on our own afterwards
    - A pool for 2 currencies
        - Price at market price first
        - To create a pool : has to put x bitcoin and y ETH (x*px = y*py)
- Documentation
    - Read article on pools and learned a couple of formulas
- Understand working code and comment it to make it clearer

Shubh Lashkery:

This week I read a paper "SoK: Decentralized Exchanges 
(DEX) with Automated Market Maker (AMM) Protocols" 
(Xu, 2022), and understood the mechanisms through which 
Liquidity Pools operate. Furthermore we decided the 
structure and the framework through which we will operate.

The Econ research team will test how parameters effect 
different initiatives for stakeholders, and will hope 
to build a monte-carlo method simulation of the liquidity
pool to see how different values of parameters, effect 
market outcome. And how to conclude from this data. 

This will require research into how theoretical shifts 
in parameters are expected to behave, and what parameters
should be analysed. Then there will need to be code to 
run these simulations. And finally a dissection of the 
conclusions from the outcomes. 

This means there will need to understand how the market 
team's code works and how we can inherit their class, to
run our simulations smoothly. 

Mia Chambat:

Hello, I am part of the Econ Research Team. For this first week, we were tasked 
with understanding how liquidity protocols work and how our group can contribute 
to the project. I tried to read as many research papers as possible and select 
those that seemed useful for our project. The papers "Automated Market Making with 
Synchronized Liquidity Pools" and "Impermanent Loss and Risk Profile of a Liquidity 
Provider" proved to be very relevant to our project. They especially highlighted the 
importance of coding both risks of liquidity pools: the slippage and the impermanent loss. 
As a team, we concluded that our main task is to code a Monte Carlo market simulator to test 
the codes of the liquidity pool and help improve it. We split into two groups of two for this: 
one will delve into research to understand the parameters and expected outputs of the liquidity 
pool, while the other team will be tasked with understanding the code written by the liquidity pool 
team. This will be my task, with Kaoutar, and what we will be doing during Week 2 (and most probably during Week 3 as well).

Kaoutar Fahraoui:

This week was all about trying to understand how a liquidity protocol works and how our work (as the econ research team) 
would be useful to the project. Moreover, I tried to get as many research papers as possible treating about automated market makers.
We came up to the conclusion that our work would mainly be to put in place a monte carlo market simultor that would test the liquidity
pool that is being coded. For this matter, two teams would be formed: one that would dive into research in order to understand the 
different inputs and expected outputs, as well as the specific functions, one other that would try to understand the codes written by 
the liquidity pool team. At the end, the goal is to test if the coded liquidity pool is a valid one. Mia and I are going to take care 
of understanding the liquidity pool codes in order to find all the inputs we should take into account in our monte carlo simulator. 


Alessandro Massaad
Read research papers that are at the core of the project (SoK: Decentralized Exchanges (DEX) with Automated Market Maker (AMM) Protocols, by Jiahua Xu, Krzysztof Paruch, Simon Cousaert, Yebo Feng; and Liquifi Protocol, by Igor Struchkov, Igor Mikhalev, Alexey Zubritskiy, Bihao Song). 
Further informed myself by watching a ton of youtube videos on the math of automated market makers and liquidity protocols. 
Got familiar with the different Github repositories that might be useful for later, and how to run them on VScode or Qt using make. 


Amine Roudani
This week I familiarized myself with liquidity protocols and AMM by actively reading and understanding the “SoK: Decentralized Exchanges DEX with Automated Market Maker AMM Protocols” research paper, and researching further. Moreover, I looked at the pros and cons of different liquidity protocols, and I looked at how the algorithms worked for slippage and divergence loss. I had a meeting with my teammates earlier today where we discussed any topics which we found tricky to understand. We compiled the pros & cons of various liquidity pool protocols into this google doc. (https://docs.google.com/document/d/1HUpTT339Z7z44kpRlpZAw7NPCl4zYhbKiotqQIAaShE/edit). Specifically, I wrote about uniswapv2, uniswapv3 and balancer in this doc. 

Julien Girod
This week I deepened my research on the associated costs of the protocol. 
 Which led to better study the implicit cost of a protocol in terms of slippage 
 and divergence loss. Then I proceeded to better understand how is slippage control in 
 Uniswap v3 an improvement of uniswap v2's slippage formula.


